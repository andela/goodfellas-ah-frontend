// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`containers SingleArticle container :Error should render as expected 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Article
    article={null}
    error="this is an error"
    getAnArticle={
      [MockFunction] {
        "calls": Array [
          Array [
            "some-slug",
          ],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    getComments={
      [MockFunction] {
        "calls": Array [
          Array [
            "some-slug",
          ],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    match={
      Object {
        "params": Object {
          "slug": "some-slug",
        },
      }
    }
    userId={null}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div>
        this is an error
      </div>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": "this is an error",
      },
      "ref": null,
      "rendered": "this is an error",
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div>
          this is an error
        </div>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "this is an error",
        },
        "ref": null,
        "rendered": "this is an error",
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`containers SingleArticle container should render as expected 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Article
    article={Object {}}
    error=""
    getAnArticle={
      [MockFunction] {
        "calls": Array [
          Array [
            "some-slug",
          ],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    getComments={
      [MockFunction] {
        "calls": Array [
          Array [
            "some-slug",
          ],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    match={
      Object {
        "params": Object {
          "slug": "some-slug",
        },
      }
    }
    userId=""
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div>
        <div
          className="single-page"
        >
          <ArticleHeader
            article={Object {}}
            userId=""
          />
          <ArticleBody
            article={Object {}}
            userId=""
          />
          <Comment
            article={Object {}}
            handleChange={[Function]}
            handleKeyPress={[Function]}
          />
        </div>
      </div>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="single-page"
        >
          <ArticleHeader
            article={Object {}}
            userId=""
          />
          <ArticleBody
            article={Object {}}
            userId=""
          />
          <Comment
            article={Object {}}
            handleChange={[Function]}
            handleKeyPress={[Function]}
          />
        </div>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <ArticleHeader
              article={Object {}}
              userId=""
            />,
            <ArticleBody
              article={Object {}}
              userId=""
            />,
            <Comment
              article={Object {}}
              handleChange={[Function]}
              handleKeyPress={[Function]}
            />,
          ],
          "className": "single-page",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "article": Object {},
              "userId": "",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "article": Object {},
              "userId": "",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "article": Object {},
              "comments": undefined,
              "handleChange": [Function],
              "handleKeyPress": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div>
          <div
            className="single-page"
          >
            <ArticleHeader
              article={Object {}}
              userId=""
            />
            <ArticleBody
              article={Object {}}
              userId=""
            />
            <Comment
              article={Object {}}
              handleChange={[Function]}
              handleKeyPress={[Function]}
            />
          </div>
        </div>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="single-page"
          >
            <ArticleHeader
              article={Object {}}
              userId=""
            />
            <ArticleBody
              article={Object {}}
              userId=""
            />
            <Comment
              article={Object {}}
              handleChange={[Function]}
              handleKeyPress={[Function]}
            />
          </div>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <ArticleHeader
                article={Object {}}
                userId=""
              />,
              <ArticleBody
                article={Object {}}
                userId=""
              />,
              <Comment
                article={Object {}}
                handleChange={[Function]}
                handleKeyPress={[Function]}
              />,
            ],
            "className": "single-page",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "article": Object {},
                "userId": "",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "article": Object {},
                "userId": "",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "article": Object {},
                "comments": undefined,
                "handleChange": [Function],
                "handleKeyPress": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
